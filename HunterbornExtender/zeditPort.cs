using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins.Cache;
using static HunterbornExtender.FormKeys;
using System.Linq;
using Noggog.WorkEngine;
using DynamicData;

namespace HunterbornExtender
{
    sealed internal class Program
    {


        private static Lazy<Settings.Settings> _settings = null!;

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch, new PatcherPreferences() {
                    ExclusionMods = new List<ModKey>() {
                        new ModKey("HunterbornExtenderPatch.esp", ModType.Plugin),
                    }
                })
                .SetTypicalOpen(GameRelease.SkyrimSE, "HunterbornExtenderPatch.esp")
                .SetAutogeneratedSettings("settings", "settings.json", out _settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            state.LoadOrder.PriorityOrder.Weapon().WinningOverrides().Distinct();
            /*System.Console.WriteLine(HUNTERBORN.ToString());
            state.LoadOrder.TryGetIfEnabledAndExists(HUNTERBORN, out var HBMOD);
            System.Console.WriteLine(HBMOD);
            HBMOD?.FormLists.ForEach(fl => {
                String edid = fl.EditorID?.ToString() ?? "whatever";
                FormKey refid = fl.FormKey;
                Console.WriteLine("static readonly public FormLink<IFormList> " + edid + " = HUNTERBORN.MakeFormKey(0x" + refid.IDString() + ").ToLink<IFormList>();");
            });*/

        }


       
        private List<FormLink<IFactionGetter>> forbiddenFactions = new(new FormLink<IFactionGetter>[] {
            Dawnguard.Faction.DLC1VampireFaction,
            Dragonborn.Faction.DLC2AshSpawnFaction, 
            Skyrim.Faction.DragonPriestFaction, 
            Skyrim.Faction.DraugrFaction,
            Skyrim.Faction.DwarvenAutomatonFaction,
            Skyrim.Faction.IceWraithFaction,
            Dawnguard.Faction.SoulCairnFaction,
            Skyrim.Faction.VampireFaction,
            Skyrim.Faction.WispFaction 
        });
        
        private List<FormLink<IVoiceTypeGetter>> allowedVoice = new(new FormLink<IVoiceTypeGetter>[]{
            Skyrim.VoiceType.CrBearVoice,
            Skyrim.VoiceType.CrChickenVoice,
            Skyrim.VoiceType.CrCowVoice,
            Skyrim.VoiceType.CrDeerVoice,
            Skyrim.VoiceType.CrDogVoice,
            Dawnguard.VoiceType.CrDogHusky,
            Skyrim.VoiceType.CrFoxVoice,
            Skyrim.VoiceType.CrGoatVoice,
            Skyrim.VoiceType.CrHareVoice,
            Skyrim.VoiceType.CrHorkerVoice,
            Skyrim.VoiceType.CrHorseVoice,
            Skyrim.VoiceType.CrMammothVoice,
            Skyrim.VoiceType.CrMudcrabVoice,
            Skyrim.VoiceType.CrSabreCatVoice,
            Skyrim.VoiceType.CrSkeeverVoice,
            Skyrim.VoiceType.CrSlaughterfishVoice,
            Skyrim.VoiceType.CrWolfVoice,
            Dragonborn.VoiceType.DLC2CrBristlebackVoice,
            Skyrim.VoiceType.CrChaurusVoice,
            Skyrim.VoiceType.CrFrostbiteSpiderVoice,
            Skyrim.VoiceType.CrFrostbiteSpiderGiantVoice,
            Skyrim.VoiceType.CrSprigganVoice,
            Skyrim.VoiceType.CrTrollVoice,
            Skyrim.VoiceType.CrWerewolfVoice,
            Skyrim.VoiceType.CrDragonVoice,
            Dawnguard.VoiceType.CrChaurusInsectVoice
        });

        private List<String> monsterTypes = new(new String[] {
            "Chaurus",
            "CharusHunter",
            "Dragon",
            "FrostbiteSpider",
            "FrostbiteSpiderGiant",
            "Spriggan",
            "SprigganBurnt",
            "Troll",
            "TrollFrost",
            "Werebear",
            "Werewolf" });

        private List<String> animalTypes = new(new String[] {
            "Skip", 
            "Bear", 
            "Bear, Cave", 
            "Bear, Snow", 
            "Bristleback", 
            "Chaurus", 
            "Chaurus, Hunter", 
            "Chicken", 
            "Cow", 
            "Deer", 
            "Deer, Vale", 
            "Dog", 
            "Dragon", 
            "Elk, Female", 
            "Elk, Male", 
            "Fox", 
            "Fox, Snow", 
            "Goat", 
            "Hare", 
            "Horker", 
            "Horse", 
            "Mammoth", 
            "MudCrab, Small", 
            "MudCrab, Large", 
            "MudCrab, Giant", 
            "Sabrecat", 
            "Sabrecat, Vale", 
            "Skeever", 
            "Slaughterfish", 
            "Spider, Frostbite", 
            "Spider, Giant Frostbite", 
            "Spriggan", 
            "Spriggan, Burnt", 
            "Troll", 
            "Troll, Frost", 
            "Werebear", 
            "Werewolf", 
            "Wolf", 
            "Wolf, Ice"});

        private List<EDIDLink<IRaceGetter>> blacklistedRecords = new(new EDIDLink<IRaceGetter>[] { 
            new EDIDLink<IRaceGetter>("HISLCBlackWolf"), 
            new EDIDLink<IRaceGetter>("BSKEncRat"),
        });

        private List<String> deathNameItemMatch = new(new String[] {
            "Werebear", 
			"Bear", 
			"BearCave", 
			"BearSnow", 
			"Bristleback", 
			"Chaurus", 
			"CharusHunter", 
			"Chicken", 
			"Cow", 
			"DeerVale", 
			"Deer", 
			"Dog", 
			"Dragon", 
			"ElkFemale", 
			"ElkMale", 
			"FoxIce", 
			"Fox", 
			"FrostbiteSpiderGiant", 
			"FrostbiteSpider", 
			"Goat", 
			"Hare", 
			"Horker", 
			"Horse", 
			"Mammoth", 
			"MudCrab01", 
			"MudCrab02", 
			"MudCrab03", 
			"SabrecatSnow", 
			"SabrecatVale", 
			"Sabrecat", 
			"Skeever", 
			"Slaughterfish", 
			"Spriggan", 
			"SprigganBurnt", 
			"TrollFrost", 
			"Troll", 
			"Werewolf", 
			"WolfIce", 
			"Wolf"
        });

        private List<FormLink<ILeveledItemGetter>> blacklistedDeathItems = new(new FormLink<ILeveledItemGetter>[] {
            Skyrim.LeveledItem.DeathItemDragonBonesOnly,
            Skyrim.LeveledItem.DeathItemVampire,
            Skyrim.LeveledItem.DeathItemForsworn,
            Dawnguard.LeveledItem.DLC1DeathItemDragon06,
            Dawnguard.LeveledItem.DLC1DeathItemDragon07,
            ModKey.FromFileName("Skyrim Immersive Creatures Special Edition").MakeFormKey(0x11B217).ToLink<ILeveledItemGetter>()
        });

        private Dictionary<string, string> fixedAnimalTypes = new Dictionary<string,string> () {
            { "Bear, Cave", "BearCave" },
            { "Bear, Snow", "BearSnow" },
            { "Chaurus, Hunter", "CharusHunter" },
            { "Elk, Female", "ElkFemale" },
            { "Elk, Male", "ElkMale" },
            { "Fox, Snow", "FoxIce" },
            { "MudCrab, Small", "MudCrab01" },
            { "MudCrab, Large", "MudCrab02" },
            { "MudCrab, Giant", "MudCrab03" },
            { "Sabrecat, Snow", "SabrecatSnow" },
            { "Spider, Frostbite", "FrostbiteSpider" },
            { "Spider, Giant Frostbite", "FrostbiteSpiderGiant" },
            { "Spriggan, Burnt", "SprigganBurnt" },
            { "Deer, Vale", "DeerVale" },
            { "Sabrecat, Vale", "SabrecatVale" },
            { "Wolf, Ice", "WolfIce" },
            { "Troll, Frost", "TrollFrost" }
        };

        private Dictionary<string, int> animalTypeIndex = new Dictionary<string, int>() {
            { "Bear" , 0 },
            { "BearCave" , 1 },
			{ "BearSnow" , 2 },
            { "Chicken" , 3 },
			{ "Cow" , 4 },
			{ "Deer" , 5 },
			{ "Dog" , 6 },
			{ "ElkFemale" , 7 },
			{ "ElkMale" , 8 },
			{ "Fox" , 9 },
			{ "FoxIce" , 10 },
			{ "Goat" , 11 },
			{ "Hare" , 12 },
			{ "Horker" , 13 },
			{ "Horse" , 14 },
			{ "Mammoth" , 15 },
			{ "MudCrab01" , 16 },
			{ "MudCrab02" , 17 },
			{ "MudCrab03" , 18 },
			{ "Sabrecat" , 19 },
			{ "SabrecatSnow" , 20 },
			{ "Skeever" , 21 },
			{ "Slaughterfish" , 22 },
			{ "Wolf" , 23 },
			{ "WolfIce" , 24 },
			{ "DeerVale" , 25 },
			{ "SabrecatVale" , 26 },
			{ "Bristleback" , 27 },
			{ "Chaurus" , 0 },
			{ "FrostbiteSpider" , 1 },
			{ "FrostbiteSpiderGiant" , 2 },
			{ "Spriggan" , 3 },
			{ "Troll" , 4 },
			{ "TrollFrost" , 5 },
			{ "Werewolf" , 6 },
			{ "Dragon" , 7 },
			{ "CharusHunter" , 8 },
			{ "Werebear" , 9 },
			{ "SprigganBurnt", 10 }
        };

        private Dictionary<string, string> vanillaToCaco = new Dictionary<string, string>() {
            { "_DS_Food_Raw_Bear", "CACO_FoodMeatBear" },
			{ "_DS_Food_Raw_Chaurus", "CACO_FoodMeatChaurusMeat" },
			{ "_DS_Food_Raw_Dragon", "_DS_Food_Raw_Dragon" },
			{ "_DS_Food_Raw_Elk", "FoodMeatVenison" },
			{ "_DS_Food_Raw_Fox", "CACO_FoodMeatFox" },
			{ "_DS_Food_Raw_Goat", "CACO_FoodMeatGoatPortionRaw" },
			{ "_DS_Food_Raw_Hare", "_DS_Food_Raw_Hare" },
			{ "_DS_Food_Raw_Mammoth", "CACO_FoodMeatMammoth" },
			{ "_DS_Food_Raw_Mudcrab", "_DS_Food_Raw_Mudcrab" },
			{ "_DS_Food_Raw_Sabrecat", "CACO_FoodMeatSabre" },
			{ "_DS_Food_Raw_Skeever", "CACO_FoodMeatSkeeverRaw" },
			{ "_DS_Food_Raw_Slaughterfish", "CACO_FoodSeaSlaughterfishRaw" },
			{ "_DS_Food_Raw_Spider", "_DS_Food_Raw_Spider" },
			{ "_DS_Food_Raw_Troll", "CACO_FoodMeatTroll" },
			{ "_DS_Food_Raw_Wolf", "FoodDogMeat" },
			{ "FoodBeef", "FoodBeef" },
			{ "FoodChicken", "FoodChicken" },
			{ "FoodClamMeat", "FoodClamMeat" },
			{ "FoodDogMeat", "FoodDogMeat" },
			{ "FoodGoatMeat", "FoodGoatMeat" },
			{ "FoodHorkerMeat", "FoodHorkerMeat" },
			{ "FoodHorseMeat", "FoodHorseMeat" },
			{ "FoodMammothMeat", "FoodMammothMeat" },
			{ "FoodPheasant", "FoodPheasant" },
			{ "FoodRabbit", "FoodRabbit" },
			{ "FoodSalmon", "FoodSalmon" },
			{ "FoodVenison", "FoodVenison" },
			{ "DLC2FoodAshHopperMeat", "DLC2FoodAshHopperMeat" },
			{ "DLC2FoodAshHopperLeg", "DLC2FoodAshHopperLeg" },
			{ "DLC2FoodBoarMeat", "DLC2FoodBoarMeat" },
			{ "HumanFlesh", "CACO_FoodMeatHumanoidFlesh" }
        };


        List<IConstructibleObjectGetter> cobjRecords = new();
        List<IFormListGetter> flstRecords = new();
        List<ILeveledItemGetter> lvliRecords = new();
        List<IMiscItemGetter> miscRecords = new();
        List<IIngestibleGetter> alchRecords = new();
        List<IQuestGetter> qustRecords = new();
        List<IMiscItemGetter> Pelts = new();
        List<IMiscItemGetter> DefaultPelt = new();
        bool CheckPatchesRunOnce = false;
        int progressNumber = 0;
        bool debugging = true;
        List<IFormLinkGetter<ILeveledItemGetter>> knownDeathItemsAnimals = new();
        List<IFormLinkGetter<ILeveledItemGetter>> knownDeathItemsMonsters = new();


        private void loadKnownDeathItemsAnimals(ILinkCache<ISkyrimMod, ISkyrimModGetter> cache) {
            var formlist = _DS_FL_DeathItems.TryResolve<IFormListGetter>(cache) ?? throw new InvalidOperationException();
            knownDeathItemsAnimals.AddRange(formlist.Items.OfType<IFormLinkGetter<ILeveledItemGetter>>().Where(x => !x.IsNull));
        }

        private void loadKnownDeathItemsMonsters(ILinkCache<ISkyrimMod, ISkyrimModGetter> cache) {
            var formlist = _DS_FL_DeathItems_Monsters.TryResolve<IFormListGetter>(cache) ?? throw new InvalidOperationException();
            knownDeathItemsMonsters.AddRange(formlist.Items.OfType<IFormLinkGetter<ILeveledItemGetter>>().Where(x => !x.IsNull));
        }

        private bool hasFaction(INpcGetter creature, List<FormLink<IFactionGetter>> factions, ILinkCache<ISkyrimMod, ISkyrimModGetter> cache) {
            return !creature.Factions
                .Select(rank => rank.Faction.TryResolve<IFactionGetter>(cache))
                .Where(faction => faction != null ? factions.Contains(faction.ToLink()) : false)
                .Any();
        }

        private bool hasVoice(INpcGetter creature, List<FormLink<IVoiceTypeGetter>> voices)
        {
            var creatureVoice = creature.Voice;
            return voices.Any(v => v.Equals(creatureVoice));
        }

        private bool isCreature(INpcGetter actor, ILinkCache<ISkyrimMod, ISkyrimModGetter> cache) {
            var deathItem = actor.DeathItem;
            var edid = actor.EditorID;
            var edidLink = edid != null ? new EDIDLink<IRaceGetter>(edid) : null;

            return !hasFaction(actor, forbiddenFactions, cache)
                && hasVoice(actor, allowedVoice)
                && deathItem != null
                && !(knownDeathItemsAnimals.Contains(deathItem) || knownDeathItemsMonsters.Contains(deathItem))
                && (edidLink == null || !blacklistedRecords.Contains(edidLink))
                && !blacklistedDeathItems.Any(item => item.Equals(deathItem));
        }

        private String getElementFileName(FormKey form) {
            return form.ModKey.FileName;
        }

        private void BuildPeltRecords()
        {

            xelib.GetElements(0, "Hunterborn.esp\\FLST\\_DS_FL_PeltLists\\FormIDs").forEach((value, index) => {
                if (xelib.HasElement(xelib.GetLinksTo(value), "FormIDs"))
                {
                    let testing = xelib.GetElements(xelib.GetLinksTo(value), "FormIDs")
                    Pelts[xelib.FullName(xelib.GetLinksTo(testing[1]))] = { };
                    DefaultPelt[xelib.FullName(xelib.GetLinksTo(testing[1]))] = { };
                    testing.forEach((value, index) => {
                        Pelts[xelib.FullName(xelib.GetLinksTo(testing[1]))][index] = xelib.GetWinningOverride(xelib.GetLinksTo(testing[index]));
                        DefaultPelt[xelib.FullName(xelib.GetLinksTo(testing[1]))][index] = xelib.GetWinningOverride(xelib.GetLinksTo(testing[index]));
                    })
                }
            });
            xelib.GetElements(0, "Hunterborn.esp\\FLST\\_DS_FL_PeltLists_Monsters\\FormIDs").forEach((value, index) => {
                if (xelib.HasElement(xelib.GetLinksTo(value), "FormIDs"))
                {
                    let testing = xelib.GetElements(xelib.GetLinksTo(value), "FormIDs")
                    Pelts[xelib.FullName(xelib.GetLinksTo(testing[1]))] = { };
                    DefaultPelt[xelib.FullName(xelib.GetLinksTo(testing[1]))] = { };
                    testing.forEach((value, index) => {
                        Pelts[xelib.FullName(xelib.GetLinksTo(testing[1]))][index] = xelib.GetWinningOverride(xelib.GetLinksTo(testing[index]));
                        DefaultPelt[xelib.FullName(xelib.GetLinksTo(testing[1]))][index] = xelib.GetWinningOverride(xelib.GetLinksTo(testing[index]));
                    })
                }
            });
        };

    }
}
